{
  "_args": [
    [
      "react-native-navigation@github:techery/react-native-navigation#73fdfe7f1b33538e3d10a38491e7045c6c1c7676",
      "/Users/spark/techery/fishduel-react"
    ]
  ],
  "_from": "techery/react-native-navigation#73fdfe7f1b33538e3d10a38491e7045c6c1c7676",
  "_id": "react-native-navigation@1.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/react-native-navigation",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/techery/react-native-navigation/73fdfe7f1b33538e3d10a38491e7045c6c1c7676/package.json",
      "gitUrl": "git://github.com/techery/react-native-navigation.git#73fdfe7f1b33538e3d10a38491e7045c6c1c7676",
      "httpsUrl": "git+https://github.com/techery/react-native-navigation.git#73fdfe7f1b33538e3d10a38491e7045c6c1c7676",
      "shortcut": "github:techery/react-native-navigation#73fdfe7f1b33538e3d10a38491e7045c6c1c7676",
      "ssh": "git@github.com:techery/react-native-navigation.git#73fdfe7f1b33538e3d10a38491e7045c6c1c7676",
      "sshUrl": "git+ssh://git@github.com/techery/react-native-navigation.git#73fdfe7f1b33538e3d10a38491e7045c6c1c7676",
      "type": "github"
    },
    "name": "react-native-navigation",
    "raw": "react-native-navigation@github:techery/react-native-navigation#73fdfe7f1b33538e3d10a38491e7045c6c1c7676",
    "rawSpec": "github:techery/react-native-navigation#73fdfe7f1b33538e3d10a38491e7045c6c1c7676",
    "scope": null,
    "spec": "github:techery/react-native-navigation#73fdfe7f1b33538e3d10a38491e7045c6c1c7676",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/techery/react-native-navigation.git#73fdfe7f1b33538e3d10a38491e7045c6c1c7676",
  "_shasum": "671029207040524e171632992939f0b0458bf008",
  "_shrinkwrap": null,
  "_spec": "react-native-navigation@github:techery/react-native-navigation#73fdfe7f1b33538e3d10a38491e7045c6c1c7676",
  "_where": "/Users/spark/techery/fishduel-react",
  "author": {
    "email": "talkol@gmail.com",
    "name": "Tal Kol"
  },
  "bugs": {
    "url": "https://github.com/wix/react-native-navigation/issues"
  },
  "dependencies": {
    "react-native-controllers": "^2.0.0",
    "react-redux": "*"
  },
  "description": "React Native Navigation - truly native navigation for iOS and Android",
  "devDependencies": {},
  "gitHead": "73fdfe7f1b33538e3d10a38491e7045c6c1c7676",
  "homepage": "https://github.com/wix/react-native-navigation",
  "license": "MIT",
  "main": "index.js",
  "name": "react-native-navigation",
  "nativePackage": true,
  "optionalDependencies": {
    "react-redux": "*"
  },
  "peerDependencies": {
    "react": ">=0.14.5",
    "react-native": ">=0.25.1"
  },
  "publishConfig": {
    "registry": "https://registry.npmjs.org/"
  },
  "readme": "# React Native Navigation\n\nApp-wide support for 100% native navigation with an easy cross-platform interface. For iOS, this package is a wrapper around [react-native-controllers](https://github.com/wix/react-native-controllers), but provides a simplified more abstract API over it. This abstract API will be unified with the Android solution which is currently work in progress. It also fully supports redux if you use it.\n\n## Overview\n\n* [Why use this package](#why-use-this-package)\n* [Installation - iOS](#installation---ios)\n* [Installation - Android](#installation---android)\n* [Usage](#usage)\n* [Top Level API](#top-level-api)\n* [Screen API](#screen-api)\n* [Styling the navigator](#styling-the-navigator)\n* [Adding buttons to the navigator](#adding-buttons-to-the-navigator)\n* [Styling the tab bar](#styling-the-tab-bar)\n* [Deep links](#deep-links)\n* [Release Notes](RELEASES.md)\n* [License](#license)\n\n## Why use this package\n\nOne of the major things missing from React Native core is fully featured native navigation. Navigation includes the entire skeleton of your app with critical components like nav bars, tab bars and side menu drawers.\n\nIf you're trying to deliver a user experience that's on par with the best native apps out there, you simply can't compromise on JS-based components trying to fake the real thing.\n\nFor example, this package replaces the native [NavigatorIOS](https://facebook.github.io/react-native/docs/navigatorios.html) that has been [abandoned](https://facebook.github.io/react-native/docs/navigator-comparison.html) in favor of JS-based solutions that are easier to maintain. For more details see in-depth discussion [here](https://github.com/wix/react-native-controllers#why-do-we-need-this-package).\n\n## Installation - iOS\n\n * Make sure you are using react-native version >= 0.25.1\n\n * In your project folder run `npm install react-native-navigation --save`\n> Note: We recommend using npm ver 3+. If you insist on using npm ver 2 please notice that the location for react-native-controllers in node_modules will be under the react-native-navigation folder and you'll need to change the paths in Xcode below accordingly.\n\n * Add the native files of the dependency [react-native-controllers](https://github.com/wix/react-native-controllers) to your Xcode project:\n\n   * In Xcode, in Project Navigator (left pane), right-click on the `Libraries` > `Add files to [project name]`. Add `./node_modules/react-native-controllers/ios/ReactNativeControllers.xcodeproj` ([screenshots](https://facebook.github.io/react-native/docs/linking-libraries-ios.html#step-1))\n\n   * In Xcode, in Project Navigator (left pane), click on your project (top) and select the `Build Phases` tab (right pane). In the `Link Binary With Libraries` section add `libReactNativeControllers.a` ([screenshots](https://facebook.github.io/react-native/docs/linking-libraries-ios.html#step-2))\n\n   * In Xcode, in Project Navigator (left pane), click on your project (top) and select the `Build Settings` tab (right pane). In the `Header Search Paths` section add `$(SRCROOT)/../node_modules/react-native-controllers/ios`. Make sure on the right to mark this new path `recursive` ([screenshots](https://facebook.github.io/react-native/docs/linking-libraries-ios.html#step-3))\n\n * In Xcode, under your project files, modify `AppDelegate.m` according to this [example](https://github.com/wix/react-native-navigation/blob/master/example/ios/example/AppDelegate.m)\n\n## Installation - Android\n\nComing soon, not yet supported\n\n## Usage\n\nIf you don't like reading, just jump into the fully working example projects:\n\n* [example](example) - Example project showing the best practice use of this package. Shows many navigation features.\n* [redux-example](example-redux) - Best practice use of this package in a [redux](https://github.com/reactjs/redux)-based project.\n\n#### Step 1 - Change the way your app starts\n\nThis would normally go in your `index.ios.js`\n\n```js\nimport { Navigation } from 'react-native-navigation';\n\nimport { registerScreens } from './screens';\nregisterScreens(); // this is where you register all of your app's screens\n\n// start the app\nNavigation.startTabBasedApp({\n  tabs: [\n    {\n      label: 'One',\n      screen: 'example.FirstTabScreen', // this is a registered name for a screen\n      icon: require('../img/one.png'),\n      selectedIcon: require('../img/one_selected.png'),\n      title: 'Screen One'\n    },\n    {\n      label: 'Two',\n      screen: 'example.SecondTabScreen',\n      icon: require('../img/two.png'),\n      selectedIcon: require('../img/two_selected.png'),\n      title: 'Screen Two'\n    }\n  ]\n});\n```\n\n#### Step 2 - Register all of your screen components\n\nEvery screen that you want to be able to place in a tab, push to the navigation stack or present modally needs to be registered. We recommend doing this in a central place, like [`screens/index.js`](example/src/screens/index.js).\n\n> Note: Since your screens will potentially be bundled with other packages, your registered name must be **unique**! Follow a namespacing convention like `packageName.ScreenName`.\n\n```js\nimport { Navigation } from 'react-native-navigation';\n\nimport FirstTabScreen from './FirstTabScreen';\nimport SecondTabScreen from './SecondTabScreen';\nimport PushedScreen from './PushedScreen';\n\n// register all screens of the app (including internal ones)\nexport function registerScreens() {\n  Navigation.registerComponent('example.FirstTabScreen', () => FirstTabScreen);\n  Navigation.registerComponent('example.SecondTabScreen', () => SecondTabScreen);\n  Navigation.registerComponent('example.PushedScreen', () => PushedScreen);\n}\n```\n\n#### Step 3 - That's it\n\nIf you want to do a navigation action like push a new screen over an existing one, take a look at the [Screen API](#screen-api). It would look something like this:\n\n```js\n// this would go inside the Component implementation of one of your screens, like FirstTabScreen.js\nthis.props.navigator.push({\n  screen: 'example.PushedScreen',\n  title: 'Pushed Screen'\n});\n```\n\n## Top Level API\n\n#### `Navigation`\n\n```js\nimport { Navigation } from 'react-native-navigation';\n```\n\n * **registerComponent(screenID, generator, store = undefined, Provider = undefined)**\n\nEvery screen component in your app must be registered with a unique name. The component itself is a traditional React component extending `React.Component`.\n\n```js\n// not using redux (just ignore the last 2 arguments)\nNavigation.registerComponent('example.FirstTabScreen', () => FirstTabScreen);\n\n// using redux, pass your store and the Provider object from react-redux\nNavigation.registerComponent('example.FirstTabScreen', () => FirstTabScreen, store, Provider);\n```\n\n * **startTabBasedApp(params)**\n\nChange your app root into an app based on several tabs (usually 2-5), a very common pattern in iOS (like Facebook app or the iOS Contacts app). Every tab has its own navigation stack with a native nav bar.\n\n```js\nNavigation.startTabBasedApp({\n  tabs: [\n    {\n      label: 'One', // tab label as appears under the icon in iOS (optional)\n      screen: 'example.FirstTabScreen', // unique ID registered with Navigation.registerScreen\n      icon: require('../img/one.png'), // local image asset for the tab icon unselected state (optional)\n      selectedIcon: require('../img/one_selected.png'), // local image asset for the tab icon selected state (optional)\n      title: 'Screen One', // title of the screen as appears in the nav bar (optional)\n      navigatorStyle: {}, // override the navigator style for the tab screen, see \"Styling the navigator\" below (optional),\n      navigatorButtons: {} // override the nav buttons for the tab screen, see \"Adding buttons to the navigator\" below (optional)\n    },\n    {\n      label: 'Two',\n      screen: 'example.SecondTabScreen',\n      icon: require('../img/two.png'),\n      selectedIcon: require('../img/two_selected.png'),\n      title: 'Screen Two'\n    }\n  ],\n  tabsStyle: { // optional, add this if you want to style the tab bar beyond the defaults\n    tabBarButtonColor: '#ffff00', // optional, change the color of the tab icons and text (also unselected)\n    tabBarSelectedButtonColor: '#ff9900', // optional, change the color of the selected tab icon and text (only selected)\n    tabBarBackgroundColor: '#551A8B' // optional, change the background color of the tab bar\n  },\n  drawer: { // optional, add this if you want a side menu drawer in your app\n    left: { // optional, define if you want a drawer from the left\n      screen: 'example.FirstSideMenu' // unique ID registered with Navigation.registerScreen\n    },\n    right: { // optional, define if you want a drawer from the right\n      screen: 'example.SecondSideMenu' // unique ID registered with Navigation.registerScreen\n    },\n    disableOpenGesture: false // optional, can the drawer be opened with a swipe instead of button\n  },\n  passProps: {}, // simple serializable object that will pass as props to all top screens (optional)\n  animationType: 'slide-down' // optional, add transition animation to root change: 'none', 'slide-down', 'fade'\n});\n```\n\n * **startSingleScreenApp(params)**\n\nChange your app root into an app based on a single screen (like the iOS Calendar or Settings app). The screen will receive its own navigation stack with a native nav bar\n\n```js\nNavigation.startSingleScreenApp({\n  screen: {\n    screen: 'example.WelcomeScreen', // unique ID registered with Navigation.registerScreen\n    title: 'Welcome', // title of the screen as appears in the nav bar (optional)\n    navigatorStyle: {}, // override the navigator style for the screen, see \"Styling the navigator\" below (optional)\n    navigatorButtons: {} // override the nav buttons for the screen, see \"Adding buttons to the navigator\" below (optional)\n  },\n  drawer: { // optional, add this if you want a side menu drawer in your app\n    left: { // optional, define if you want a drawer from the left\n      screen: 'example.FirstSideMenu' // unique ID registered with Navigation.registerScreen\n    },\n    right: { // optional, define if you want a drawer from the right\n      screen: 'example.SecondSideMenu' // unique ID registered with Navigation.registerScreen\n    },\n    disableOpenGesture: false // optional, can the drawer be opened with a swipe instead of button\n  },\n  passProps: {}, // simple serializable object that will pass as props to all top screens (optional)\n  animationType: 'slide-down' // optional, add transition animation to root change: 'none', 'slide-down', 'fade'\n});\n```\n\n * **showModal(params = {})**\n\nShow a screen as a modal.\n\n```js\nNavigation.showModal({\n  screen: \"example.ModalScreen\", // unique ID registered with Navigation.registerScreen\n  title: \"Modal\", // title of the screen as appears in the nav bar (optional)\n  passProps: {}, // simple serializable object that will pass as props to the modal (optional)\n  navigatorStyle: {}, // override the navigator style for the screen, see \"Styling the navigator\" below (optional)\n  navigatorButtons: {}, // override the nav buttons for the screen, see \"Adding buttons to the navigator\" below (optional)\n  animationType: 'slide-up' // 'none' / 'slide-up' , appear animation for the modal (optional, default 'slide-up')\n});\n```\n\n * **dismissModal(params = {})**\n\nDismiss the current modal.\n\n```js\nNavigation.dismissModal({\n  animationType: 'slide-down' // 'none' / 'slide-down' , dismiss animation for the modal (optional, default 'slide-down')\n});\n```\n\n * **dismissAllModals(params = {})**\n\nDismiss all the current modals at the same time.\n\n```js\nNavigation.dismissAllModals({\n  animationType: 'slide-down' // 'none' / 'slide-down' , dismiss animation for the modal (optional, default 'slide-down')\n});\n```\n\n* **showLightBox(params = {})**\n\nShow a screen as a lightbox.\n\n```js\nNavigation.showLightBox({\n  screen: \"example.LightBoxScreen\", // unique ID registered with Navigation.registerScreen\n  passProps: {}, // simple serializable object that will pass as props to the lightbox (optional)\n  style: {\n    backgroundBlur: \"dark\", // 'dark' / 'light' / 'xlight' / 'none' - the type of blur on the background\n    backgroundColor: \"#ff000080\" // tint color for the background, you can specify alpha here (optional)\n  }\n});\n```\n\n* **dismissLightBox(params = {})**\n\nDismiss the current lightbox.\n\n```js\nNavigation.dismissLightBox();\n```\n\n * **registerScreen(screenID, generator)**\n\nThis is an internal function you probably don't want to use directly. If your screen components extend `Screen` directly (`import { Screen } from 'react-native-navigation'`), you can register them directly with `registerScreen` instead of with `registerComponent`. The main benefit of using `registerComponent` is that it wraps your regular screen component with a `Screen` automatically.\n\n```js\nNavigation.registerScreen('example.AdvancedScreen', () => AdvancedScreen);\n```\n\n## Screen API\n\nThis API is relevant when in a screen component context - it allows a screen to push other screens, pop screens, change its navigator style, etc. Access to this API is available through the `navigator` object that is passed to your component through `props`.\n\n * **push(params)**\n\nPush a new screen into this screen's navigation stack.\n\n```js\nthis.props.navigator.push({\n  screen: 'example.ScreenThree', // unique ID registered with Navigation.registerScreen\n  title: undefined, // navigation bar title of the pushed screen (optional)\n  passProps: {}, // simple serializable object that will pass as props to the pushed screen (optional)\n  animated: true, // does the push have transition animation or does it happen immediately (optional)\n  backButtonTitle: undefined, // override the back button title (optional)\n  backButtonHidden: false, // hide the back button altogether (optional)\n  navigatorStyle: {}, // override the navigator style for the pushed screen (optional)\n  navigatorButtons: {} // override the nav buttons for the pushed screen (optional)\n});\n```\n\n * **pop(params = {})**\n\nPop the top screen from this screen's navigation stack.\n\n```js\nthis.props.navigator.pop({\n  animated: true // does the pop have transition animation or does it happen immediately (optional)\n});\n```\n\n * **popToRoot(params = {})**\n\nPop all the screens until the root from this screen's navigation stack.\n\n```js\nthis.props.navigator.popToRoot({\n  animated: true // does the pop have transition animation or does it happen immediately (optional)\n});\n```\n\n * **resetTo(params)**\n\nReset the screen's navigation stack to a new screen (the stack root is changed).\n\n```js\nthis.props.navigator.resetTo({\n  screen: 'example.ScreenThree', // unique ID registered with Navigation.registerScreen\n  title: undefined, // navigation bar title of the pushed screen (optional)\n  passProps: {}, // simple serializable object that will pass as props to the pushed screen (optional)\n  animated: true, // does the push have transition animation or does it happen immediately (optional)\n  navigatorStyle: {}, // override the navigator style for the pushed screen (optional)\n  navigatorButtons: {} // override the nav buttons for the pushed screen (optional)\n});\n```\n\n * **showModal(params = {})**\n\nShow a screen as a modal.\n\n```js\nthis.props.navigator.showModal({\n  screen: \"example.ModalScreen\", // unique ID registered with Navigation.registerScreen\n  title: \"Modal\", // title of the screen as appears in the nav bar (optional)\n  passProps: {}, // simple serializable object that will pass as props to the modal (optional)\n  navigatorStyle: {}, // override the navigator style for the screen, see \"Styling the navigator\" below (optional)\n  animationType: 'slide-up' // 'none' / 'slide-up' , appear animation for the modal (optional, default 'slide-up')\n});\n```\n\n * **dismissModal(params = {})**\n\nDismiss the current modal.\n\n```js\nthis.props.navigator.dismissModal({\n  animationType: 'slide-down' // 'none' / 'slide-down' , dismiss animation for the modal (optional, default 'slide-down')\n});\n```\n\n * **dismissAllModals(params = {})**\n\nDismiss all the current modals at the same time.\n\n```js\nthis.props.navigator.dismissAllModals({\n  animationType: 'slide-down' // 'none' / 'slide-down' , dismiss animation for the modal (optional, default 'slide-down')\n});\n```\n\n* **showLightBox(params = {})**\n\nShow a screen as a lightbox.\n\n```js\nthis.props.navigator.showLightBox({\n screen: \"example.LightBoxScreen\", // unique ID registered with Navigation.registerScreen\n passProps: {}, // simple serializable object that will pass as props to the lightbox (optional)\n style: {\n   backgroundBlur: \"dark\", // 'dark' / 'light' / 'xlight' / 'none' - the type of blur on the background\n   backgroundColor: \"#ff000080\" // tint color for the background, you can specify alpha here (optional)\n }\n});\n```\n\n* **dismissLightBox(params = {})**\n\nDismiss the current lightbox.\n\n```js\nthis.props.navigator.dismissLightBox();\n```\n\n * **handleDeepLink(params = {})**\n\nTrigger a deep link within the app. See [deep links](#deep-links) for more details about how screens can listen for deep link events.\n\n```js\nthis.props.navigator.handleDeepLink({\n  link: \"chats/2349823023\" // the link string (required)\n});\n```\n\n * **setOnNavigatorEvent(callback)**\n\nSet a handler for navigator events (like nav button press). This would normally go in your component constructor.\n\n```js\n// this.onNavigatorEvent will be our handler\nthis.props.navigator.setOnNavigatorEvent(this.onNavigatorEvent.bind(this));\n```\n\n * **setButtons(params = {})**\n\nSet buttons dynamically on the navigator. If your buttons don't change during runtime, see \"Adding buttons to the navigator\" below to add them using `static navigatorButtons = {...};`.\n\n```js\nthis.props.navigator.setButtons({\n  leftButtons: [], // see \"Adding buttons to the navigator\" below for format (optional)\n  rightButtons: [], // see \"Adding buttons to the navigator\" below for format (optional)\n  animated: true // does the change have transition animation or does it happen immediately (optional)\n});\n```\n\n * **setTitle(params = {})**\n\nSet the nav bar title dynamically. If your title doesn't change during runtime, set it when the screen is defined / pushed.\n\n```js\nthis.props.navigator.setTitle({\n  title: \"Dynamic Title\" // the new title of the screen as appears in the nav bar\n});\n```\n\n * **toggleDrawer(params = {})**\n\nToggle the side menu drawer assuming you have one in your app.\n\n```js\nthis.props.navigator.toggleDrawer({\n  side: 'left', // the side of the drawer since you can have two, 'left' / 'right'\n  animated: true, // does the toggle have transition animation or does it happen immediately (optional)\n  to: 'open' // optional, 'open' = open the drawer, 'closed' = close it, missing = the opposite of current state\n});\n```\n\n * **toggleTabs(params = {})**\n\nToggle whether the tabs are displayed or not (only in tab-based apps).\n\n```js\nthis.props.navigator.toggleTabs({\n  to: 'hidden', // required, 'hidden' = hide tab bar, 'shown' = show tab bar\n  animated: true // does the toggle have transition animation or does it happen immediately (optional)\n});\n```\n\n * **setTabBadge(params = {})**\n\nSet the badge on a tab (any string or numeric value).\n\n```js\nthis.props.navigator.setTabBadge({\n  tabIndex: 0, // (optional) if missing, the badge will be added to this screen's tab\n  badge: 17 // badge value, null to remove badge\n});\n```\n\n * **switchToTab(params = {})**\n\nSwitch to a tab (sets it as the currently selected tab).\n\n```js\nthis.props.navigator.switchToTab({\n  tabIndex: 0 // (optional) if missing, this screen's tab will become selected\n});\n```\n\n* **toggleNavBar(params = {})**\n\nToggle whether the navigation bar is displayed or not.\n\n```js\nthis.props.navigator.toggleNavBar({\n  to: 'hidden', // required, 'hidden' = hide navigation bar, 'shown' = show navigation bar\n  animated: true // does the toggle have transition animation or does it happen immediately (optional). By default animated: true\n});\n```\n\n## Styling the navigator\n\nYou can style the navigator appearance and behavior by passing a `navigatorStyle` object. This object can be passed when the screen is originally created; can be defined per-screen by setting `static navigatorStyle = {};` on the screen component; and can be overridden when a screen is pushed.\n\nThe easiest way to style your screen is by adding `static navigatorStyle = {};` to your screen React component definition.\n\n```js\nexport default class StyledScreen extends Component {\n  static navigatorStyle = {\n    drawUnderNavBar: true,\n    navBarTranslucent: true\n  };\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <View style={{flex: 1}}>...</View>\n     );\n  }\n```\n\n#### Style object format\n\n```js\n{\n  navBarTextColor: '#000000', // change the text color of the title (remembered across pushes)\n  navBarBackgroundColor: '#f7f7f7', // change the background color of the nav bar (remembered across pushes)\n  navBarButtonColor: '#007aff', // change the button colors of the nav bar (eg. the back button) (remembered across pushes)\n  navBarHidden: false, // make the nav bar hidden\n  navBarHideOnScroll: false, // make the nav bar hidden only after the user starts to scroll\n  navBarTranslucent: false, // make the nav bar semi-translucent, works best with drawUnderNavBar:true\n  navBarNoBorder: false, // hide the navigation bar bottom border (hair line). Default false\n  drawUnderNavBar: false, // draw the screen content under the nav bar, works best with navBarTranslucent:true\n  drawUnderTabBar: false, // draw the screen content under the tab bar (the tab bar is always translucent)\n  statusBarBlur: false, // blur the area under the status bar, works best with navBarHidden:true\n  navBarBlur: false, // blur the entire nav bar, works best with drawUnderNavBar:true\n  tabBarHidden: false, // make the screen content hide the tab bar (remembered across pushes)\n  statusBarHideWithNavBar: false // hide the status bar if the nav bar is also hidden, useful for navBarHidden:true\n  statusBarHidden: false, // make the status bar hidden regardless of nav bar state\n  statusBarTextColorScheme: 'dark' // text color of status bar, 'dark' / 'light' (remembered across pushes)\n}\n```\n\n> Note: If you set any styles related to the Status Bar, make sure that in Xcode > project > Info.plist, the property `View controller-based status bar appearance` is set to `YES`.\n\nAll supported styles are defined [here](https://github.com/wix/react-native-controllers#styling-navigation). There's also an example project there showcasing all the different styles.\n\n## Adding buttons to the navigator\n\nNav bar buttons can be defined per-screen by adding `static navigatorButtons = {...};` on the screen component definition. This object can also be passed when the screen is originally created; and can be overridden when a screen is pushed. Handle onPress events for the buttons by setting your handler with `navigator.setOnNavigatorEvent(callback)`.\n\n```js\nclass FirstTabScreen extends Component {\n  static navigatorButtons = {\n    rightButtons: [\n      {\n        title: 'Edit', // for a textual button, provide the button title (label)\n        id: 'edit', // id for this button, given in onNavigatorEvent(event) to help understand which button was clicked\n        testID: 'e2e_rules', // optional, used to locate this view in end-to-end tests\n        disabled: true // optional, used to disable the button (appears faded and doesn't interact)\n      },\n      {\n        icon: require('../../img/navicon_add.png'), // for icon button, provide the local image asset name\n        id: 'add' // id for this button, given in onNavigatorEvent(event) to help understand which button was clicked\n      }\n    ]\n  };\n  constructor(props) {\n    super(props);\n    // if you want to listen on navigator events, set this up\n    this.props.navigator.setOnNavigatorEvent(this.onNavigatorEvent.bind(this));\n  }\n  onNavigatorEvent(event) { // this is the onPress handler for the two buttons together\n    if (event.type == 'NavBarButtonPress') { // this is the event type for button presses\n      if (event.id == 'edit') { // this is the same id field from the static navigatorButtons definition\n        AlertIOS.alert('NavBar', 'Edit button pressed');\n      }\n      if (event.id == 'add') {\n        AlertIOS.alert('NavBar', 'Add button pressed');\n      }\n    }\n  }\n  render() {\n    return (\n      <View style={{flex: 1}}>...</View>\n     );\n  }\n```\n\n#### Buttons object format\n\n```js\n{\n  rightButtons: [{ // buttons for the right side of the nav bar (optional)\n    title: 'Edit', // if you want a textual button\n    icon: require('../../img/navicon_edit.png'), // if you want an image button\n    id: 'compose', // id of the button which will pass to your press event handler\n    testID: 'e2e_is_awesome', // if you have e2e tests, use this to find your button\n    disabled: true // optional, used to disable the button (appears faded and doesn't interact)\n  }],\n  leftButtons: [] // buttons for the left side of the nav bar (optional)\n}\n```\n\n## Styling the tab bar\n\nYou can style the tab bar appearance by passing a `tabsStyle` object when the app is originally created (on `startTabBasedApp`).\n\n```js\nNavigation.startTabBasedApp({\n  tabs: [ ... ],\n  tabsStyle: { // optional, add this if you want to style the tab bar beyond the defaults\n    tabBarButtonColor: '#ff0000'\n  }\n});\n```\n\n#### Style object format\n\n```js\n{\n  tabBarButtonColor: '#ffff00', // change the color of the tab icons and text (also unselected)\n  tabBarSelectedButtonColor: '#ff9900', // change the color of the selected tab icon and text (only selected)\n  tabBarBackgroundColor: '#551A8B' // change the background color of the tab bar\n}\n```\n\nAll supported styles are defined [here](https://github.com/wix/react-native-controllers#styling-tab-bar). There's also an example project there showcasing all the different styles.\n\n## Deep links\n\nDeep links are strings which represent internal app paths/routes. They commonly appear on push notification payloads to control which section of the app should be displayed when the notification is clicked. For example, in a chat app, clicking on the notification should open the relevant conversation on the \"chats\" tab.\n\nAnother use-case for deep links is when one screen wants to control what happens in another sibling screen. Normally, a screen can only push/pop from its own stack, it cannot access the navigation stack of a sibling tab for example. Returning to our chat app example, assume that by clicking on a contact in the \"contacts\" tab we want to open the relevant conversation in the \"chats\" tab. Since the tabs are siblings, you can achieve this behavior by triggering a deep link:\n\n```js\nonContactSelected(contactID) {\n  this.props.navigator.handleDeepLink({\n    link: 'chats/' + contactID\n  });\n}\n```\n\n> Tip: Deep links are also the recommended way to handle side drawer actions. Since the side drawer screen is a sibling to the rest of the app, it can control the other screens by triggering deep links.\n\n#### Handling deep links\n\nEvery deep link event is broadcasted to all screens. A screen can listen to these events by defining a handler using `setOnNavigatorEvent` (much like listening for button events). Using this handler, the screen can filter links directed to it by parsing the link string and act upon any relevant links found.\n\n```js\nexport default class SecondTabScreen extends Component {\n  constructor(props) {\n    super(props);\n    // if you want to listen on navigator events, set this up\n    this.props.navigator.setOnNavigatorEvent(this.onNavigatorEvent.bind(this));\n  }\n  onNavigatorEvent(event) {\n    // handle a deep link\n    if (event.type == 'DeepLink') {\n      const parts = event.link.split('/');\n      if (parts[0] == 'tab2') {\n        // handle the link somehow, usually run a this.props.navigator command\n      }\n    }\n  }\n```\n\n#### Deep link string format\n\nThere is no specification for the format of deep links. Since you're implementing the parsing logic in your handlers, you can use any format you wish.\n\n## License\n\nThe MIT License.\n\nSee [LICENSE](LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/wix/react-native-navigation.git"
  },
  "version": "1.0.0"
}
